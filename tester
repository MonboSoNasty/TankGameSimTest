--// Main WindUI Script for Tank Game
-- By MonboSoNasty + ChatGPT
-- Fully Updated: OP AutoSkills & Tank Changer Integration

--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UIS = game:GetService("UserInputService")

--// Load WindUI
local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

local Localization = WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "en",
    Translations = {
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Example",
            ["WELCOME"] = "Welcome to WindUI!",
            ["LIB_DESC"] = "Beautiful UI library for Roblox",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency",
            ["LOCKED_TAB"] = "Locked Tab"
        }
    }
})

WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

-- Gradient Helper
local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i,i))
    end
    return result
end

--// Main Window
local Window = WindUI:CreateWindow({
    Title = "loc:WINDUI_EXAMPLE",
    Icon = "geist:window",
    Author = "loc:WELCOME",
    Folder = "WindUI_Example",
    Size = UDim2.fromOffset(580, 490),
    Theme = "Dark",
    User = { Enabled = true, Anonymous = true },
    Acrylic = false,
    HideSearchBar = false,
    SideBarWidth = 200,
})

Window.User:SetAnonymous(true)
Window:SetIconSize(48)

--// Tags & Rainbow Time
Window:Tag({ Title = "v1.6.4", Color = Color3.fromHex("#30ff6a") })
Window:Tag({ Title = "Beta", Color = Color3.fromHex("#315dff") })
local TimeTag = Window:Tag({
    Title = "--:--",
    Radius = 0,
    Color = WindUI:Gradient({ ["0"]={Color=Color3.fromHex("#FF0F7B"),Transparency=0}, ["100"]={Color=Color3.fromHex("#F89B29"),Transparency=0}}, {Rotation=45})
})
local hue = 0
task.spawn(function()
	while true do
		local now = os.date("*t")
		local hours = string.format("%02d", now.hour)
		local minutes = string.format("%02d", now.min)
		hue = (hue + 0.01) % 1
		TimeTag:SetTitle(hours..":"..minutes)
		task.wait(0.06)
	end
end)

--// Topbar Button - Theme switcher
Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({ Title="Theme Changed", Content="Current theme: "..WindUI:GetCurrentTheme(), Duration=2 })
end, 990)

--// Sections
local Sections = {
    Features = Window:Section({ Title="loc:FEATURES", Opened=true }),
    Appearance = Window:Section({ Title="loc:APPEARANCE", Opened=true }),
    Config = Window:Section({ Title="loc:CONFIGURATION", Opened=true })
}

--// -------------------------------
-- FEATURES: OP AutoSkills Tab
--// -------------------------------
local FeatureTab = Sections.Features:Tab({ Title="OP AutoSkills", Icon="zap" })
FeatureTab:Section({ Title="⚙️ Auto Skills", TextSize=20 })

local SkillUpgrade = ReplicatedStorage:WaitForChild("Skills"):WaitForChild("Upgrade")
local skillList = { "Bullet Penetration","Bullet Damage","Bullet Speed","Body Damage","Health Regeneration","Max Health","Shield","Reload" }
local running, fireAmounts = {}, {}

for _, skill in ipairs(skillList) do
    running[skill] = false
    fireAmounts[skill] = 1

    FeatureTab:Toggle({
        Title = skill,
        Value = false,
        Callback = function(state)
            running[skill] = state
            if state then
                task.spawn(function()
                    for _ = 1, fireAmounts[skill] do
                        if not running[skill] then break end
                        SkillUpgrade:FireServer(skill)
                        task.wait()
                    end
                    running[skill] = false
                    WindUI:Notify({ Title="AutoSkills", Content=skill.." upgrades finished!", Duration=2 })
                end)
            end
        end
    })

    FeatureTab:Input({
        Title = "Fire Count for "..skill,
        Value = tostring(fireAmounts[skill]),
        Placeholder = "Enter amount",
        Callback = function(text)
            local val = tonumber(text)
            if val and val > 0 then
                fireAmounts[skill] = val
            else
                WindUI:Notify({ Title="Invalid Input", Content="Please enter a valid number above 0.", Duration=2 })
            end
        end
    })
end

--// -------------------------------
-- FEATURES: Tank Changer Tab
--// -------------------------------
local TankTab = Sections.Features:Tab({ Title="Tank Changer", Icon="car" })
TankTab:Section({ Title="🛞 Tank Changer", TextSize=20 })

local tierNames = {
    ["Tier 0"]={"Coming Soon"},
    ["Tier 1"]={"Crusher","Director","Guard","Machine Gun","Sniper","Trapper","TwinShot"},
    ["Tier 2"]={"Coming Soon"},
    ["Tier 3"]={"Coming Soon"},
    ["Tier 4"]={"Coming Soon"}
}

local dropdowns = {}
for tier,tanks in pairs(tierNames) do
    dropdowns[tier] = TankTab:Dropdown({
        Title = tier.." Tanks",
        Values = tanks,
        Callback = function(choice)
            local args = {choice,1}
            ReplicatedStorage:WaitForChild("Evolutions"):WaitForChild("UpgradeTank"):FireServer(unpack(args))
            WindUI:Notify({ Title="Tank Changer", Content="Evolving into "..choice.."...", Duration=2 })
        end
    })
end

local customTank = ""
TankTab:Input({
    Title="Custom Tank Name",
    Placeholder="Enter tank name here",
    Callback=function(text) customTank=text end
})
TankTab:Button({
    Title="Change Tank",
    Desc="Evolve into custom tank",
    Callback=function()
        if customTank=="" then
            WindUI:Notify({ Title="Tank Changer", Content="Please enter a tank name first.", Duration=2 })
            return
        end
        local args={customTank,1}
        ReplicatedStorage:WaitForChild("Evolutions"):WaitForChild("UpgradeTank"):FireServer(unpack(args))
        WindUI:Notify({ Title="Tank Changer", Content="Evolving into "..customTank.."...", Duration=2 })
    end
})

--// -------------------------------
-- APPEARANCE TAB
--// -------------------------------
local AppearanceTab = Sections.Appearance:Tab({ Title="Appearance", Icon="brush" })
AppearanceTab:Paragraph({ Title="Customize Interface", Desc="Personalize your experience", Image="palette", ImageSize=20 })

local themes = {}
for name,_ in pairs(WindUI:GetThemes()) do table.insert(themes,name) end
table.sort(themes)

local canchangetheme = true
local themeDropdown = AppearanceTab:Dropdown({
    Title="loc:THEME_SELECT",
    Values=themes,
    SearchBarEnabled=true,
    MenuWidth=280,
    Value="Dark",
    Callback=function(theme) WindUI:SetTheme(theme) end
})

AppearanceTab:Slider({
    Title="loc:TRANSPARENCY",
    Value={Min=0,Max=1,Default=0.2},
    Step=0.1,
    Callback=function(v) WindUI.TransparencyValue=v end
})

AppearanceTab:Button({
    Title="Create New Theme",
    Icon="plus",
    Callback=function()
        Window:Dialog({ Title="Create Theme", Content="This feature is coming soon!", Buttons={{Title="OK", Variant="Primary"}} })
    end
})

--// -------------------------------
-- CONFIG TAB
--// -------------------------------
local ConfigTab = Sections.Config:Tab({ Title="Configuration", Icon="settings" })
ConfigTab:Paragraph({ Title="Configuration Manager", Desc="Save and load your settings", Image="save", ImageSize=20, Color="White" })

local configName="default"
local configFile=nil
local MyPlayerData={ name="Player1", level=1, inventory={"sword","shield","potion"} }
local ConfigManager = Window.ConfigManager

if ConfigManager then
    ConfigManager:Init(Window)

    ConfigTab:Input({
        Title="Config Name",
        Value=configName,
        Callback=function(v) configName=v or "default" end
    })

    ConfigTab:Button({
        Title="loc:SAVE_CONFIG",
        Icon="save",
        Variant="Primary",
        Callback=function()
            configFile=ConfigManager:CreateConfig(configName)
            if configFile:Save() then
                WindUI:Notify({ Title="loc:SAVE_CONFIG", Content="Saved as: "..configName, Icon="check", Duration=3 })
            else
                WindUI:Notify({ Title="Error", Content="Failed to save config", Icon="x", Duration=3 })
            end
        end
    })

    ConfigTab:Button({
        Title="loc:LOAD_CONFIG",
        Icon="folder",
        Callback=function()
            configFile=ConfigManager:CreateConfig(configName)
            local loadedData=configFile:Load()
            if loadedData then
                WindUI:Notify({ Title="loc:LOAD_CONFIG", Content="Loaded: "..configName, Icon="refresh-cw", Duration=5 })
            else
                WindUI:Notify({ Title="Error", Content="Failed to load config", Icon="x", Duration=3 })
            end
        end
    })
else
    ConfigTab:Paragraph({ Title="Config Manager Not Available", Desc="This feature requires ConfigManager", Image="alert-triangle", ImageSize=20, Color="White" })
end

--// Window callbacks
Window:OnClose(function()
    if ConfigManager and configFile then
        configFile:Set("playerData",MyPlayerData)
        configFile:Set("lastSave",os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
    end
end)

